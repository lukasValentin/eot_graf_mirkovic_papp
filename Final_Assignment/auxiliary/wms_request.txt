http://129.206.228.72/cached/osm/WMSServer?REQUEST=GetCapabilities&SERVICE=WMS&VERSION=1.1.0

http://129.206.228.72/cached/osm/WMSServer?REQUEST=GetMap&VERSION=1.1.1&LAYERS=osm_auto:all&BBOX=-71.13,42.32,-71.03,42.42&FORMAT=image/png&SRS=EPSG:4326&WIDTH=250&HEIGHT=250&STYLES=default&TRANSPARENT=True

http://129.206.228.72/cached/osm/WMSServer?REQUEST=GetMap&VERSION=1.1.1&LAYERS=osm_auto:all&BBOX=-74.10,40.56,-73.64,40.95&FORMAT=image/png&SRS=EPSG:4326&WIDTH=250&HEIGHT=250&STYLES=default&TRANSPARENT=True

http://129.206.228.72/cached/osm/service/WMSServer?SERVICE=WMS&LAYERS=osm_auto%3Aall&SRS=EPSG:4326&FORMAT=image%2Fpng&HEIGHT=250&TRANSPARENT=TRUE&REQUEST=GetMap&BBOX=-71.13,42.32,-71.03,42.42&WIDTH=250&STYLES=&VERSION=1.1.1

http://129.206.228.72/cached/osm/service/WMSServer
EPSG:4326
-74.10,40.56,-73.64,40.95

http://giswebservices.massgis.state.ma.us/geoserver/wms

// a GetMap-Request object is created using the established wms connection
		GetMapRequest mapRequest = wmsServer.createGetMapRequest();
		
		//define version
		mapRequest.setVersion("1.1.1");
		
		// define the output format -> png (is fixed for all requests)
		mapRequest.setFormat("image/png");
		
		// set the dimensions of the returned image
		mapRequest.setDimensions(imageDimensions[0], imageDimensions[1]);
		
		// should the image be transparent?
		mapRequest.setTransparent(transparent);
		
		// SRS must be specified
		mapRequest.setSRS(SRS);
		
		// setup the bounding box -> therefore the double array must be converted to a single string
		// therefore the private method getSRSAsString is called
		mapRequest.setBBox(bbox);
		
		// set the desired layer into the request
		mapRequest.addLayer(layerName_);



package eot_graf_mirkovic_papp;

import java.io.IOException;

import javax.swing.JOptionPane;

import org.ejml.ops.EjmlUnitTests.TestException;

/*
 * this public class holds the main method
 * 
 * authors -> classes:
 * Lukas Graf		-> grahicalUserInterface and WMSConnector
 * Stefan Mirkovic	-> Img2GroundOverlay and Tweets2KML
 * Levente Papp		->
 * 
 * GoogleEarthMapper is a collection of Java classes to
 * 1.) 	connect to the WMS-Server and download a rendered map for a selected
 * 		region as a png image file
 * 2.) 	include the downloaded image file in a kml structure as well as
 * 		tweets extracted from a CSV file
 * 3.) 	automatically start GoogleEarth with the generated kml files for displaying
 * 		the results
 * 
 * uses geotools 18.4
 * 
 */


	
	public static void doNextSteps(graphicalUserInterface gui_) {
		
		//after running the GUI we have all the user inputs as well as the WMS-Server
		//response necessary to perform the next steps
		//a ground-overlay is created using the WMS-Server response
		
		System.out.println("Test");
		
		String outputDir = gui_.storageLocation;
		
		//the WMS-Server response is stored at storageLocation
		String imageSource = outputDir + System.getProperty("file.separator") + 
				"WMS_Response.png";
		
		//we need a name for the kml structure (will be stored at user-def. storageLocation)
		String kmlFilePath = outputDir + System.getProperty("file.separator") + 
				"groundOverlayTweets.kml";
		
		//some content of the kml must be set
		String nameOfOverlay = "Basemap";
		
		//add a short description
		String description = "This is an automatically created description. You can change it manually if you like.";
		
		//also the coordinates of the bounding box are required
		//therefore, we use the method bbox2array from the auxClass
		double[] bboxArray = new double[4];
		
		//surround with try-catch in case something goes wrong
		try {
			
			bboxArray = auxClass.bbox2array(gui_.bbox);
			
		} catch (IOException | TestException ex) {
			
			JOptionPane.showMessageDialog(null,"The bounding box is invalid", 
					"Error", JOptionPane.ERROR_MESSAGE);
			ex.printStackTrace();
			
		}
		
		//now the kml groundOverlay can be created
		boolean success = Img2GroundOverlay.WriteToKML(
				kmlFilePath, imageSource, nameOfOverlay, description, 
				bboxArray[3], bboxArray[1], bboxArray[2], bboxArray[0]);
		
		//the methods returns True (everything OK) or False, if something went wrong
		if (!success) {
			JOptionPane.showMessageDialog(null, "Could not create kml Ground-Overlay",
					"Error", JOptionPane.ERROR_MESSAGE);
		} else {
			JOptionPane.showMessageDialog(null, "KML Ground-Overlay created successfully!",
					"Good News", JOptionPane.INFORMATION_MESSAGE);
		}

	}
	
}


Skip to content
 
Search or jump to…

Pull requests
Issues
Marketplace
Explore
 @lukasValentin Sign out
0
1 0 lukasValentin/eot_graf_mirkovic_papp
 Code  Issues 0  Pull requests 0  Projects 0  Wiki  Insights  Settings
eot_graf_mirkovic_papp/Final_Assignment/src/eot_graf_mirkovic_papp/Img2GroundOverlay.java
50d3262  an hour ago
 Stefan Img2GroundOverlay has been extended. --> added transparency-function
    
73 lines (67 sloc)  2.89 KB
package eot_graf_mirkovic_papp;
import java.io.FileWriter;
import java.io.File;
/*
 * this public class takes the result of the WMS-Request (stored locally on the
 * computer as rendered image) and inserts it as KML GroundOverlay Element into a
 * KML-conform structure
 */

public class Img2GroundOverlay {

	public static boolean WriteToKML(String FilePath, String ImageSource, String name, String description, double north, double south, double east, double west) // no ";" because it's a method! 	
	{		//"static" means that I don't need an extra object in order to call the method; "boolean" because we want to know whether the operation was successful									
			//Inside the WriteToKML()-brackets we need to put in all dynamic content 
		try
		{
			File file = new File(FilePath); // "File" creates a file object
			file.createNewFile(); 			// creates a new File at the FilePath
			FileWriter writer = new FileWriter(file); // The FileWriter is able to write into a file and at the constructor 
			
			writer.write( // writer.write shall write our typical kml-structure (for GroundOverlays)!
					"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n"+
					"<kml xmlns=\"http://www.opengis.net/kml/2.2\" xmlns:gx=\"http://www.google.com/kml/ext/2.2\" xmlns:kml=\"http://www.opengis.net/kml/2.2\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\r\n"+
					"<GroundOverlay> \r\n"+
					"<name>"+name+"</name> \r\n"+
					"<description>"+description+"</description> \r\n"+
					"<gx:balloonVisibility>1</gx:balloonVisibility> \r\n"+
					"<color>4dffffff</color> \r\n"+ //Opacity-value "alpha" ("alpha"RGB-syntax) --> 30% of 255 = 4d (HEX)
					"<Icon> \r\n"+
					"	<href>"+ImageSource+"</href> \r\n"+
					"</Icon> \r\n"+
					"<LatLonBox> \r\n"+
					"	<north>"+north+"</north> \r\n"+
					"	<south>"+south+"</south> \r\n"+
					"	<east>"+east+"</east> \r\n"+
					"	<west>"+west+"</west> \r\n"+
					"</LatLonBox> \r\n"+
					"</GroundOverlay> \r\n"+
					"</kml> \r\n"
					);
			writer.close();
			return true; // return value is true, fine!
		}
		
		catch (Exception e) 
		{
			return false; // return value is false = default
		}
	}
	// I'll need something like this: path variable, boundingbox variable, title/<name> variable, description variable
	
	/*
	 * Sample Code (Salzburg is used)
	 * 
	 * <?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2" xmlns:gx="http://www.google.com/kml/ext/2.2" xmlns:kml="http://www.opengis.net/kml/2.2" xmlns:atom="http://www.w3.org/2005/Atom">
<GroundOverlay>
	<name>Stadt Salzburg</name>
	<description>ich bin die Stadtteile Salzburgs.</description>
	<Icon>
		<href>https://upload.wikimedia.org/wikipedia/commons/0/00/Salzburger_Stadtteile.jpg</href>
		<viewBoundScale>0.75</viewBoundScale>
	</Icon>
	<LatLonBox>
		<north>47.85589438482411</north>
		<south>47.75037379569893</south>
		<east>13.12769948076074</east>
		<west>12.98322792797626</west>
	</LatLonBox>
</GroundOverlay>
</kml>*/
}
© 2019 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
Press h to open a hovercard with more details.



